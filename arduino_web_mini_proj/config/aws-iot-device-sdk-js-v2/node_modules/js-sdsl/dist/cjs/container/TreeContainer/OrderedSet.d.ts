import TreeBaseContainer from './Base/TreeBaseContainer';
import { initContainer } from "../ContainerBase/index";
import TreeIterator from './Base/TreeIterator';
import TreeNode from './Base/TreeNode';
export declare class OrderedSetIterator<K> extends TreeIterator<K, undefined> {
    constructor(node: TreeNode<K, undefined>, header: TreeNode<K, undefined>, iteratorType?: 'normal' | 'reverse');
    get pointer(): K;
}
declare class OrderedSet<K> extends TreeBaseContainer<K, undefined> {
    constructor(container?: initContainer<K>, cmp?: (x: K, y: K) => number);
    private readonly iterationFunc;
    begin(): OrderedSetIterator<K>;
    end(): OrderedSetIterator<K>;
    rBegin(): OrderedSetIterator<K>;
    rEnd(): OrderedSetIterator<K>;
    front(): K | undefined;
    back(): K | undefined;
    forEach(callback: (element: K, index: number) => void): void;
    getElementByPos(pos: number): K;
    /**
     * Inserts element to Set.
     */
    insert(key: K): void;
    find(element: K): OrderedSetIterator<K>;
    /**
     * @return An iterator to the first element not less than the given key.
     */
    lowerBound(key: K): OrderedSetIterator<K>;
    /**
     * @return An iterator to the first element greater than the given key.
     */
    upperBound(key: K): OrderedSetIterator<K>;
    /**
     * @return An iterator to the first element not greater than the given key.
     */
    reverseLowerBound(key: K): OrderedSetIterator<K>;
    /**
     * @return An iterator to the first element less than the given key.
     */
    reverseUpperBound(key: K): OrderedSetIterator<K>;
    /**
     * Union the other Set to self.
     * Waiting for optimization, this is O(mlog(n+m)) algorithm now, but we expect it to be O(mlog(n/m+1)).
     * More information => https://en.wikipedia.org/wiki/Red%E2%80%93black_tree#Set_operations_and_bulk_operations
     */
    union(other: OrderedSet<K>): void;
    [Symbol.iterator](): Generator<K, void, undefined>;
}
export default OrderedSet;
