"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("../../ContainerBase/index");
class TreeIterator extends index_1.ContainerIterator {
    constructor(node, header, iteratorType) {
        super(iteratorType);
        this.node = node;
        this.header = header;
    }
    pre() {
        if (this.iteratorType === 'reverse') {
            if (this.node === this.header.right) {
                throw new RangeError('Tree iterator access denied!');
            }
            this.node = this.node.next();
        }
        else {
            if (this.node === this.header.left) {
                throw new RangeError('Tree iterator access denied!');
            }
            this.node = this.node.pre();
        }
        return this;
    }
    next() {
        if (this.iteratorType === 'reverse') {
            if (this.node === this.header) {
                throw new RangeError('Tree iterator access denied!');
            }
            this.node = this.node.pre();
        }
        else {
            if (this.node === this.header) {
                throw new RangeError('Tree iterator access denied!');
            }
            this.node = this.node.next();
        }
        return this;
    }
    equals(obj) {
        if (obj.constructor.name !== this.constructor.name) {
            throw new TypeError(`Obj's constructor is not ${this.constructor.name}!`);
        }
        if (this.iteratorType !== obj.iteratorType) {
            throw new TypeError('Iterator type error!');
        }
        return this.node === obj.node;
    }
}
exports.default = TreeIterator;
