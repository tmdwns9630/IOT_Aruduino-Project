import { initContainer } from "../ContainerBase/index";
import TreeBaseContainer from './Base/TreeBaseContainer';
import TreeIterator from './Base/TreeIterator';
import TreeNode from './Base/TreeNode';
export declare class OrderedMapIterator<K, V> extends TreeIterator<K, V> {
    constructor(node: TreeNode<K, V>, header: TreeNode<K, V>, iteratorType?: 'normal' | 'reverse');
    get pointer(): [K, V];
}
declare class OrderedMap<K, V> extends TreeBaseContainer<K, V> {
    constructor(container?: initContainer<[K, V]>, cmp?: (x: K, y: K) => number);
    private readonly iterationFunc;
    /**
     * @return Iterator pointing to the beginning element.
     */
    begin(): OrderedMapIterator<K, V>;
    /**
     * @return Iterator pointing to the super end like c++.
     */
    end(): OrderedMapIterator<K, V>;
    /**
     * @return Iterator pointing to the end element.
     */
    rBegin(): OrderedMapIterator<K, V>;
    /**
     * @return Iterator pointing to the super begin like c++.
     */
    rEnd(): OrderedMapIterator<K, V>;
    /**
     * @return The first element.
     */
    front(): [K, V] | undefined;
    /**
     * @return The last element.
     */
    back(): [K, V] | undefined;
    /**
     * @param callback callback function, it's first param is an array which type is [key, value].
     */
    forEach(callback: (element: [K, V], index: number) => void): void;
    /**
     * @return An iterator to the first element not less than the given key.
     */
    lowerBound(key: K): OrderedMapIterator<K, V>;
    /**
     * @return An iterator to the first element greater than the given key.
     */
    upperBound(key: K): OrderedMapIterator<K, V>;
    /**
     * @return An iterator to the first element not greater than the given key.
     */
    reverseLowerBound(key: K): OrderedMapIterator<K, V>;
    /**
     * @return An iterator to the first element less than the given key.
     */
    reverseUpperBound(key: K): OrderedMapIterator<K, V>;
    /**
     * Insert a new key-value pair or set value by key.
     */
    setElement(key: K, value: V): void;
    /**
     * @param key The key you want to find.
     * @return Iterator pointing to the element if found, or super end if not found.
     */
    find(key: K): OrderedMapIterator<K, V>;
    /**
     * Gets the value of the element of the specified key.
     */
    getElementByKey(key: K): V | undefined;
    getElementByPos(pos: number): [K, V];
    /**
     * Union the other Set to self.
     * waiting for optimization, this is O(mlog(n+m)) algorithm now, but we expect it to be O(mlog(n/m+1)).
     * More information => https://en.wikipedia.org/wiki/Red%E2%80%93black_tree#Set_operations_and_bulk_operations
     */
    union(other: OrderedMap<K, V>): void;
    /**
     * Using for 'for...of' syntax like Array.
     */
    [Symbol.iterator](): Generator<[K, V], void, undefined>;
}
export default OrderedMap;
